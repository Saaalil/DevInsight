import PDFDocument from 'pdfkit';
import { IRepository } from '../models/repository.model';
import { IReport } from '../models/report.model';
import { formatDate } from './dateUtils';
import { ChartJSNodeCanvas } from 'chartjs-node-canvas';

interface ChartData {
  labels: string[];
  datasets: {
    label: string;
    data: number[];
    backgroundColor?: string;
    borderColor?: string;
  }[];
}

export class PdfExporter {
  private doc: PDFKit.PDFDocument;
  private chartRenderer: ChartJSNodeCanvas;

  constructor() {
    this.chartRenderer = new ChartJSNodeCanvas({
      width: 600,
      height: 300,
      backgroundColour: 'white',
    });
  }

  /**
   * Generate PDF report for a repository
   * @param report Report data
   * @param repository Repository data
   * @returns PDF buffer
   */
  async generateReport(report: IReport, repository: IRepository): Promise<Buffer> {
    this.doc = new PDFDocument();
    const buffers: Buffer[] = [];

    this.doc.on('data', buffers.push.bind(buffers));
    
    // Header
    this.addHeader(repository.fullName);
    
    // Report Overview
    this.addReportOverview(report);
    
    // Metrics Summary
    this.addMetricsSummary(report.data);
    
    // Charts
    await this.addCharts(report, repository);
    
    // Footer
    this.addFooter();

    this.doc.end();

    return Buffer.concat(buffers);
  }

  private addHeader(repoName: string) {
    this.doc
      .fontSize(24)
      .text('DevInsight Repository Report', { align: 'center' })
      .fontSize(18)
      .text(repoName, { align: 'center' })
      .moveDown(2);
  }

  private addReportOverview(report: IReport) {
    this.doc
      .fontSize(14)
      .text('Report Overview')
      .fontSize(12)
      .text(`Period: ${formatDate(report.startDate)} to ${formatDate(report.endDate)}`)
      .text(`Report Type: ${report.reportType}`)
      .text(`Generated: ${formatDate(report.createdAt)}`)
      .moveDown(2);
  }

  private addMetricsSummary(data: IReport['data']) {
    this.doc
      .fontSize(14)
      .text('Metrics Summary')
      .fontSize(12)
      .text(`Total Commits: ${data.commits}`)
      .text('Pull Requests:')
      .text(`  • Opened: ${data.pullRequests.opened}`)
      .text(`  • Merged: ${data.pullRequests.merged}`)
      .text(`  • Closed: ${data.pullRequests.closed}`)
      .text('Issues:')
      .text(`  • Opened: ${data.issues.opened}`)
      .text(`  • Closed: ${data.issues.closed}`)
      .text(`Active Contributors: ${data.contributors}`)
      .text(`Average PR Merge Time: ${data.mergeTime.toFixed(1)} hours`)
      .moveDown(2);
  }

  private async addCharts(report: IReport, repository: IRepository) {
    // Commit Activity Chart
    const commitData: ChartData = {
      labels: repository.metrics.commits.weekly.map((_, i) => \`Week \${i + 1}\`),
      datasets: [{
        label: 'Commits',
        data: repository.metrics.commits.weekly,
        backgroundColor: 'rgba(74, 105, 189, 0.2)',
        borderColor: 'rgb(74, 105, 189)',
      }],
    };

    const commitChart = await this.renderChart(commitData, 'Commit Activity');
    this.doc.image(commitChart, 50, this.doc.y, { width: 500 });
    this.doc.moveDown(2);

    // PR Status Chart
    const prData: ChartData = {
      labels: ['Open', 'Merged', 'Closed'],
      datasets: [{
        label: 'Pull Requests',
        data: [
          report.data.pullRequests.opened,
          report.data.pullRequests.merged,
          report.data.pullRequests.closed,
        ],
        backgroundColor: [
          'rgba(255, 206, 86, 0.2)',
          'rgba(75, 192, 192, 0.2)',
          'rgba(255, 99, 132, 0.2)',
        ],
      }],
    };

    const prChart = await this.renderChart(prData, 'Pull Request Status');
    this.doc.image(prChart, 50, this.doc.y, { width: 500 });
  }

  private async renderChart(data: ChartData, title: string): Promise<Buffer> {
    const configuration = {
      type: 'bar',
      data,
      options: {
        plugins: {
          title: {
            display: true,
            text: title,
          },
        },
        responsive: true,
        scales: {
          y: {
            beginAtZero: true,
          },
        },
      },
    };

    return await this.chartRenderer.renderToBuffer(configuration);
  }

  private addFooter() {
    const bottomMargin = 50;
    this.doc
      .fontSize(10)
      .text(
        'Generated by DevInsight - GitHub Repository Analytics',
        50,
        this.doc.page.height - bottomMargin,
        { align: 'center' }
      );
  }
}
